<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>no.avec</groupId>
	<artifactId>thymeleaf-upload-file</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!--<packaging>jar</packaging>-->

	<name>thymeleaf-upload-file</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>


			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.18.1</version>

				<configuration>
					<!--<dockerHost>tcp://192.168.99.100:2376</dockerHost>-->
					<!--<verbose>true</verbose>-->
					<images>
						<!-- A single's image configuration -->
						<image>
							<alias>upload-service</alias>
							<name>avec/${project.artifactId}:${project.version}</name>
							<build>
								<from>openjdk:8</from>
								<assembly>
									<!--<descriptor>${basedir}/assembly/docker-assembly.xml</descriptor>-->
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<!-- Expose ports -->
								<ports>
									<port>8080</port>
								</ports>
								<cmd>
									<shell>java -Djava.security.egd=file:/dev/./urandom -jar /maven/thymeleaf-upload-file-0.0.1-SNAPSHOT.jar</shell>
								</cmd>
							</build>
							<!-- ............................................................... -->
							<!-- Runtime configuration for starting/stopping/linking containers -->
							<!-- ............................................................... -->
							<run>
								<!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
								<ports>
									<port>tomcat.port:8080</port>
								</ports>
								<wait>
									<!-- Check for this URL to return a 200 return code .... -->
									<url>http://${docker.host.address}:${tomcat.port}/</url>
									<!-- ... but at max 10 seconds -->
									<time>10000</time>
								</wait>
								<links>
									<!-- Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")
                                         is given it takes the first part (first "db") as link alias. So, <link>db</link> would be
                                         enough here -->
									<!--<link>db:db</link>-->
								</links>
								<log>
									<prefix>service</prefix>
									<color>cyan</color>
								</log>
							</run>
						</image>
					</images>
				</configuration>

				<!-- Connect start/stop to pre- and
                     post-integration-test phase, respectively if you want to start
                     your docker containers during integration tests -->
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<!-- "build" should be used to create the images with the
                                 artifact -->
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>


</project>
